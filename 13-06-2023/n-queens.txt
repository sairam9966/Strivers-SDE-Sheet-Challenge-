
void solve(int col,vector<vector<int>>&board,vector<vector<int>>&ans,vector<int>&leftrow,vector<int>&upperdiagonal,vector<int>&lowerdiagonal,int n){
  if(col==n){
    vector<int>temp;
    for(int i=0;i<n;i++){
      for(int j=0;j<n;j++){
        temp.push_back(board[i][j]);
      }
    }
    ans.push_back(temp);
    return;
  }
  for(int row=0;row<n;row++){
    if(leftrow[row]==0&&lowerdiagonal[row+col]==0&&upperdiagonal[n-1+col-row]==0){
      board[row][col]=1;
      leftrow[row]=1;
      lowerdiagonal[row+col]=1;
      upperdiagonal[n-1+col-row]=1;
      solve(col+1,board,ans,leftrow,upperdiagonal,lowerdiagonal,n);
       board[row][col]=0;
      leftrow[row]=0;
      lowerdiagonal[row+col]=0;
      upperdiagonal[n-1+col-row]=0;
    }
  }


  return;
}
vector<vector<int>> solveNQueens(int n) {
  vector<int>temp;
  vector<vector<int>>ans;
  for(int i=0;i<n;i++){
    temp.push_back(0);
  }
  vector<vector<int>>board;
  for(int i=0;i<n;i++){
    board.push_back(temp);
  }
  vector<int>leftrow(n,0),upperdiagonal(2*n-1,0),lowerdiagonal(2*n-1,0);
  solve(0,board,ans,leftrow,upperdiagonal,lowerdiagonal,n);
  return ans;

}