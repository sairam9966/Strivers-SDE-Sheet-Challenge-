#include <bits/stdc++.h> 
long long merge(long long *arr,int low,int mid,int high){
    vector<long long> temp; 
    int left = low;      
    int right = mid + 1;   

    long long cnt = 0;
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            cnt += (mid - left + 1); 
            right++;
        }
    }
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }

    return cnt;
    
}
long long mergesort(long long *arr,int l,int r){
     
      long long a1=0,a2=0,a3=0;

     if(l<r){
         int m=(l+r)/2;
          a1=mergesort(arr,l,m);
          a2=mergesort(arr,m+1,r);
          a3=merge(arr,l,m,r);
     }
     return a1+a2+a3;

}
long long getInversions(long long *arr, int n){
   

   long long ans=0;
   return  mergesort(arr,0,n-1);
}